<%

var log = new Log();
var selfReg = require('/controllers/user-registration/userRegistrationClient.jag');
var userRegClient = require('/controllers/user-registration/userRegistrationServiceClient.jag');
var userDTO = Packages.org.wso2.carbon.identity.user.registration.stub.dto.UserDTO;
var userFieldDTO = Packages.org.wso2.carbon.identity.user.registration.stub.dto.UserFieldDTO;

var constants = require("../../util/constants.jag");
var util = require("../../util/utility.jag");
var i18n = util.initI18N();

function edit(){
    var user = new userDTO();
	var messages = i18n.localize("messages");
    try{
        var claim = constants.DEFAULT_CLAIM_URL;
        if(session.get('openid') != null){
            claim = constants.OPENID_REG_CLAIM_URL;
        }

        var domain = request.getParameter("domain");
        var userNameVal = request.getParameter("userName");
        var pwd = request.getParameter("pwd");
        var retypePwd = request.getParameter("retypePwd");

        if(pwd != retypePwd){
			response.sendRedirect("../../landing.jag?e=1&error=password_doesnt_match" );
			return;
        }

        var regs = session.get('pwdReg');
        var validPwd = true;
        for each(var reg in regs){
            if(reg.domainName === domain){

                var regex = new RegExp(reg.regEx);
                var valid = regex.test(pwd);
                if (value != '' && !valid) {
                    validPwd = false;
                    break;
                }
            }
        }

        if(!validPwd){
			response.sendRedirect("../../landing.jag?e=1&error=" + messages["pwd"] + " " + messages["not_valid"] );
			return;
        }

        user.setUserName(domain + "/" + userNameVal);
        user.setPassword(pwd);
        user.setOpenID(session.get("openIdURL")) ;


        var fieldValues = selfReg.readUserFieldsForUserRegistration(claim, true);
        fieldValues = fieldValues.*::['return'];

        var userFields = [];
        var i =0;

        log.debug(fieldValues);
        for each (var f in fieldValues){

           log.debug(f);
           var paramName = f.*::['claimUri'].text().toString();
           var value = request.getParameter(paramName);

           log.debug(value);
           var isValid = validate(value, f);
           if(!isValid){
           		response.sendRedirect("../../landing.jag?e=1&error=" + value + " " + messages["not_valid"] );
               	return;
           }

           var fieldDTO = new userFieldDTO();
           var inputValues = f.*::['inputValues'];
           var inputValArray = [];
           var j = 0;

            for each (var inVal in inputValues){
                 inputValArray[j]= inVal.text();
            }



           fieldDTO.setClaimUri(f.*::['claimUri'].text());
           fieldDTO.setDefaultValue(f.*::['defaultValue'].text());
           fieldDTO.setDisplayOrder(f.*::['displayOrder'].text());
           fieldDTO.setFieldName(f.*::['fieldName'].text());

           fieldDTO.setInputValues(inputValArray);
           fieldDTO.setMaxLength(f.*::['maxLength'].text());
           fieldDTO.setMinLength(f.*::['minLength'].text());
           fieldDTO.setRegEx(f.*::['regEx'].text());
           fieldDTO.setRequired(Boolean(f.*::['required'].text()));

           if(value != null && value.length > 0){
               fieldDTO.setFieldValue(value);
           } else{
               fieldDTO.setFieldValue("");
               }


          userFields[i] =  fieldDTO;
          i++;
       }
       user.setUserFields(userFields);
       userRegClient.addUser(user);
       response.sendRedirect("../../login.jag?");

    }catch(e){
        log.error(e);
         response.sendRedirect("../../landing.jag?e=1&error=" + getErrorMessage(e.message));

    }
}

function validate(value, f){
    if(f.*::['required'].text().toString() === "true"){
        if(value == null || value.length <= 0){
            return false;
        }
    }

    if(f.*::['regEx'].text().toString() != null){
        var reg = new RegExp(f.*::['regEx'].text().toString());
        var valid = reg.test(value);
        if (value != '' && !valid) {
            return false;
        }

    }
    return true;
}

edit();

function getErrorMessage(message) {
    var msg = message.split(':');
    if (msg.length > 0) {
        return msg[2].toString().replaceAll('\'',' ');
    }
    return 'Error while adding user';
}


%>
