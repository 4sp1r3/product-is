<%

var log = new Log();
var cookie = request.getParameter("cookie");
var action = request.getParameter("action");

session.put('auth-cookie', cookie);

var userAccountConnectorClient = require('controllers/service-clients/userAccountConnectorClient.jag');
var identityProviderMgtClient = require('controllers/service-clients/identityProviderMgtClient.jag');
var userProfileMgtClient = require('controllers/service-clients/userProfileMgtClient.jag');
var identityProviderAdminClient = require('controllers/service-clients/identityProviderAdminClient.jag');


if (action != null) {
    if (action == 'list') {

        try {
            var fieldValues = userAccountConnectorClient.getConnectedAccountsOfUser();
            print('{"success":true, "data":' + stringify(fieldValues) + '}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'connect') {
        var userName = request.getParameter('userName');
        var password = request.getParameter('password');

        try {
            userAccountConnectorClient.connectUserAccount(userName, password);
            print('{"success":true}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'delete') {

        var userName = request.getParameter('userName');
        try {
            userAccountConnectorClient.deleteUserAccountConnection(userName);
            print('{"success":true}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'switch') {

        var userName = request.getParameter('userName');

        try {
            var fieldValues = userAccountConnectorClient.switchLoggedInUser(userName);
            print('{"success":true, "data":' + stringify(fieldValues) + '}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'idPList') {

        try {
            var idPList = identityProviderMgtClient.getAllIdPs();
            print('{"success":true, "data":' + stringify(getIdPNameList(idPList)) + '}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'fedConnect') {
        var idPId = request.getParameter('idPId');
        var username = request.getParameter('username');

        try {
            userProfileMgtClient.associateID(idPId, username);
            print('{"success":true}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'associatedIdList') {

        var username = request.getParameter('username');
        try {
            var primaryOpenId = identityProviderAdminClient.getPrimaryOpenID(username);
            var fieldValues = userProfileMgtClient.getAssociatedIDs();
            print('{"success":true, "data":{ "primaryOpenID": "' + primaryOpenId.return + '", "list":' + getAssociatedFedAccounts(fieldValues) + '}}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    } else if (action == 'fedDelete') {
        var idPId = request.getParameter('idPId');
        var username = request.getParameter('username');

        try {
            userProfileMgtClient.removeAssociateID(idPId, username);
            print('{"success":true}');
        } catch (e) {
            print(getErrorMessage(e.message));
        }
    }
}

function getErrorMessage(message) {
    if (message != null && message.length > 0) {
        if (message == 'org.apache.axis2.AxisFault: Transport error: 401 Error: Unauthorized') {
            return '{"success":false, "reLogin":true}';
        } else {
            var msg = message.split(':');
            if (msg.length > 0) {
                return '{"success":false, "message":"' + msg[1] + '"}';
            }
        }
    }
    return '{"success":false, "message":null}';
}

function getIdPNameList(idPList) {
    if (idPList != null && idPList.length > 0) {
        var idPNames = [];
        for (var i in idPList) {
            idPNames[i] = idPList[i].identityProviderName;
        }
        return idPNames;
    }
    return null;
}

function getAssociatedFedAccounts(accounts) {
    if (accounts != null && accounts.length > 0) {
        var accountsStr = "["
        for (var i in accounts) {
            accountsStr += "{\"idPName\":\"" + accounts[i].identityProviderName + "\"," +
                           "\"username\":\"" + accounts[i].username + "\"}";
            if ((parseInt(i) + 1) < accounts.length) {
                accountsStr += ",";
            }
        }
        accountsStr += ']';
        return accountsStr;
    }
    return null;
}

%>